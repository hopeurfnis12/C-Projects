#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;

ifstream fin("input.txt");
ofstream fout("output.txt");

struct pt {
	double x, y;
};

bool cmp (pt a, pt b) {
	return a.x < b.x || a.x == b.x && a.y < b.y;
}

bool cw (pt a, pt b, pt c) {
	return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) < 0;
}

bool ccw (pt a, pt b, pt c) {
	return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) > 0;
}

void convex_hull (vector<pt> & a) {
	if (a.size() == 1)  return;
	sort (a.begin(), a.end(), &cmp);
	pt p1 = a[0],  p2 = a.back();
	vector<pt> up, down;
	up.push_back (p1);
	down.push_back (p1);
	for (size_t i=1; i<a.size(); ++i) {
		if (i==a.size()-1 || cw (p1, a[i], p2)) {
			while (up.size()>=2 && !cw (up[up.size()-2], up[up.size()-1], a[i]))
				up.pop_back();
			up.push_back (a[i]);
		}
		if (i==a.size()-1 || ccw (p1, a[i], p2)) {
			while (down.size()>=2 && !ccw (down[down.size()-2], down[down.size()-1], a[i]))
				down.pop_back();
			down.push_back (a[i]);
		}
	}
	a.clear();
	for (size_t i=0; i<up.size(); ++i)
		a.push_back (up[i]);
	for (size_t i=down.size()-2; i>0; --i)
		a.push_back (down[i]);
}

int main () {
	vector <pt> a;
	int n;
	fin >> n;
	pt t;
	for (int i = 0; i < n; i++) {
		fin >> t.x;
		fin >> t.y;
		a.push_back(t);
	}
	convex_hull(a);
	double per;
	per = sqrt(abs(a[a.size()-1].x - a[0].x)*abs(a[a.size()-1].x - a[0].x) + abs(a[a.size()-1].y - a[0].y)*abs(a[a.size()-1].y - a[0].y));
	for (int i = 1; i < a.size(); i++){
		per = per + sqrt(abs(a[i-1].x - a[i].x)*abs(a[i-1].x - a[i].x) + abs(a[i-1].y - a[i].y)*abs(a[i-1].y - a[i].y));
	}

	fout << per << endl;
}